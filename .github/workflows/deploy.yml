name: Deploy to EC2 for QA

on:
  push:
    branches:
      - qa  # Se ejecuta cuando se hace un push a la rama 'qa'

jobs:
  qa_test:
    runs-on: ubuntu-latest  # Usa un contenedor Ubuntu para ejecutar los comandos

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Clona el repositorio

      - name: Install HTML validation tool
        run: |
          sudo apt-get update
          sudo apt-get install -y tidy  # Instalamos la herramienta de validación de HTML

      - name: Validate HTML files (QA step)
        run: |
          tidy -e index.html  # Reemplaza con tus archivos HTML si es necesario
          tidy -e script.js   # Validación de JavaScript si es necesario
          tidy -e styles.css  # Validación de CSS si es necesario
          echo "HTML, JS, y CSS han pasado las pruebas de QA"

  create_pull_request:
    runs-on: ubuntu-latest
    needs: qa_test  # Este paso solo se ejecuta si las pruebas de QA fueron exitosas
    if: success()   # Solo se ejecuta si las pruebas de QA son exitosas

    steps:
      - name: Create pull request to main
        run: |
          gh pr create --title "QA Passed - Pull Request" --body "Este pull request se crea después de pasar las pruebas de QA" --base main --head qa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Utiliza el token para interactuar con la API de GitHub

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: create_pull_request  # Solo si el pull request fue creado exitosamente
    if: success()  # Solo se ejecuta si el PR fue creado correctamente

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Clona el repositorio nuevamente para asegurarse de tener los archivos actualizados

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3  # Configura la clave SSH para conectarse a EC2
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}  # La clave privada SSH almacenada en GitHub Secrets

      - name: Add EC2 hosts to known hosts
        run: |
          mkdir -p ~/.ssh
          # Añadir todas las instancias EC2 a los conocidos
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST1 }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST2 }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST4 }} >> ~/.ssh/known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}  # La IP de tu instancia EC2

      - name: Deploy to EC2 instances
        run: |
          echo "Iniciando despliegue a EC2..."
          
          # Desplegar archivos a todas las instancias
          for HOST in ${{ secrets.EC2_HOST }} ${{ secrets.EC2_HOST1 }} ${{ secrets.EC2_HOST2 }} ${{ secrets.EC2_HOST4 }}
          do
            echo "Desplegando a $HOST"
            # Copiar los archivos a un directorio temporal donde ec2-user tiene permisos
            scp -r ./index.html ./script.js ./styles.css ec2-user@$HOST:/home/ec2-user/
            # Mover los archivos a /var/www/html usando sudo
            ssh ec2-user@$HOST 'sudo mv /home/ec2-user/index.html /var/www/html/index.html'
            ssh ec2-user@$HOST 'sudo mv /home/ec2-user/script.js /var/www/html/script.js'
            ssh ec2-user@$HOST 'sudo mv /home/ec2-user/styles.css /var/www/html/styles.css'
            # Asegurarse de que Apache esté ejecutándose y recargando la configuración
            ssh ec2-user@$HOST 'sudo systemctl restart httpd'
          done
